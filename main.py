import glob
import os
import shutil
import requests
import torch.cuda
from PIL import Image
from diffusers import StableDiffusionImg2ImgPipeline
from transformers import BlipProcessor, BlipForConditionalGeneration
import subprocess
from tqdm.contrib.telegram import tqdm, trange
from random import random, randint
from time import sleep
import telebot
from telebot import types
import warnings
import numpy as np

warnings.filterwarnings("ignore")

token = 'YOUR_TOKEN_HERE'
bot = telebot.TeleBot(token)
device = torch.device("cuda:1") if torch.cuda.is_available() else torch.device("cpu")

os.makedirs("photo", exist_ok=True)
os.makedirs("sticker", exist_ok=True)
os.makedirs("sticker_pack", exist_ok=True)
os.makedirs("result_photo", exist_ok=True)

USER_MAP = {}
USER = {
    "save": 1,
    "sticker_set_name": "",
    "img_name": ""
}


def parce_sticker_set(message, sticker_set_name):
    print(f"PARCE SET FOR USER {message.from_user.id}...")

    try:
        sticker_set = bot.get_sticker_set(sticker_set_name)
        stickers = sticker_set.stickers
        for idx, stick in enumerate(stickers):
            if stick.is_video or stick.is_animated:
                bot.send_message(message.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ–∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã.")
                return
            file_id = stick.file_id
            result = bot.get_file(file_id)
            response = requests.get(f"https://api.telegram.org/file/bot{token}/{result.file_path}")
            img = response.content

            f = open(f"sticker_pack/{message.from_user.id}/{idx}.webp", "wb")
            f.write(img)
            f.close()
        bot.send_message(message.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –í–∞—à–µ —Ñ–æ—Ç–æ")
    except Exception as e:
        print("54", e)
        bot.send_message(message.from_user.id, "–î–∞–Ω–Ω–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")


def tune_dreambooth(message):
    print(f"TUNE DREAMBOOTH FOR USER {message.from_user.id}...")

    try:
        instance_data_dir = f'--instance_data_dir=sticker_pack/{message.from_user.id}'
        outp_dir = f'--output_dir=tuned_model_sticker_pack/{message.from_user.id}'

        script = subprocess.run(
            ['accelerate', 'launch', 'train_model.py', '--pretrained_model_name_or_path=tuned_model256_lowlr',
             instance_data_dir, outp_dir,
             '--instance_prompt=a cartoon sticker on monotonous background',
             '--resolution=256', '--train_batch_size=1', '--gradient_accumulation_steps=1', '--learning_rate=5e-6',
             '--lr_scheduler=constant', '--lr_warmup_steps=0', '--max_train_steps=500'], check=True, text=True)
        print(torch.cuda.memory_allocated(device="cuda:1"))
        torch.cuda.empty_cache()
        print(torch.cuda.memory_allocated(device="cuda:1"))

        bot.send_message(message.from_user.id, "–ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    except Exception as e:
        print("78", e)
        bot.send_message(message.from_user.id, "–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å–µ–π—á–∞—Å –ø—Ä–æ–±–ª–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ –ø–æ–∑–¥–Ω–µ–µ.")


def generate_prompt(message, image_path):
    print(f"GENERATE PROMPT FOR USER {message.from_user.id}...")
    try:
        processor = BlipProcessor.from_pretrained("Salesforce/blip-image-captioning-large")
        model = BlipForConditionalGeneration.from_pretrained("Salesforce/blip-image-captioning-large").to("cuda:1")

        init_image = Image.open(image_path).convert("RGB")
        init_image = init_image.resize((256, 256))
        text = ""

        inputs = processor(init_image, text, return_tensors="pt").to("cuda:1")
        out = model.generate(**inputs)
        prompt = "a cartoon sticker of " + processor.decode(out[0],
                                                            skip_special_tokens=True) + " on monotonous background"

        return prompt
    except Exception as e:
        print("98", e)
        bot.send_message(message.from_user.id, "–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å–µ–π—á–∞—Å –ø—Ä–æ–±–ª–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ.")


def generate_sticker(message, image_path):
    global USER_MAP

    print(USER_MAP)
    print(f"GENERATING STICKER FOR USER {message.from_user.id}...")

    img_name = USER_MAP[message.from_user.id]["img_name"]
    os.makedirs(f'result_photo/{message.from_user.id}', exist_ok=True)

    path_to_model = f"tuned_model_sticker_pack/{message.from_user.id}"
    pipe = StableDiffusionImg2ImgPipeline.from_pretrained(path_to_model, torch_dtype=torch.float16)
    pipe = pipe.to(device)

    init_image = Image.open(image_path).convert("RGB")
    init_image = init_image.resize((256, 256))

    prompt = generate_prompt(message, image_path)

    result = pipe(prompt=prompt, image=init_image, strength=0.75, guidance_scale=7.5).images[0]
    result.save(f'result_photo/{message.from_user.id}/{img_name}.png')

    filename1 = f'result_photo/{message.from_user.id}/{img_name}.png'
    filename2 = f'result_photo/{message.from_user.id}/{img_name}.webp'
    script = subprocess.run(['rembg', 'i', filename1, filename2], check=True, text=True)
    torch.cuda.empty_cache()


def send_sticker(message):
    global USER_MAP

    print(USER_MAP)
    print(f"SENDING STICKER FOR USER {message.from_user.id}...")

    os.makedirs(f'sticker/{message.from_user.id}', exist_ok=True)

    img_name = USER_MAP[message.from_user.id]["img_name"]
    img = Image.open(f'result_photo/{message.from_user.id}/{img_name}.webp')

    if img.size[0] > img.size[1]:
        x = 512
        y = int(512 * img.size[1] / img.size[0])
    else:
        x = int(512 * img.size[0] / img.size[1])
        y = 512
    img = img.resize((x, y))

    image = np.asarray(img)
    if image.sum() == 0:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    else:
        print('WITHOUT NSWF')
        img.save(f'sticker/{message.from_user.id}/{img_name}.png')

        bot.send_photo(message.chat.id, open(f"sticker/{message.from_user.id}/{img_name}.png", "rb"))

        shutil.rmtree(f'photo/{message.from_user.id}')
        shutil.rmtree(f'result_photo/{message.from_user.id}')

        markup = types.ReplyKeyboardMarkup(row_width=2)
        yes = types.KeyboardButton('–¥–æ–±–∞–≤–∏—Ç—å –≤ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫')
        no = types.KeyboardButton('–Ω–µ –¥–æ–±–∞–≤–ª—è—Ç—å')
        markup.add(yes, no)
        mess = '–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫?'

        bot.send_message(message.chat.id, mess,
                         parse_mode='html',
                         reply_markup=markup)


def test(message):
    markup = types.ReplyKeyboardMarkup(row_width=2)
    yes = types.KeyboardButton('—Å–¥–µ–ª–∞—Ç—å —Å—Ç–∏–∫–µ—Ä –∫ –Ω–æ–≤–æ–º—É —Å—Ç–∏–∫–µ—Ä–ø–∞–∫—É')
    no = types.KeyboardButton('–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ –ø—Ä–æ—à–ª–æ–º—É —Å—Ç–∏–∫–µ—Ä–ø–∞–∫—É')
    markup.add(yes, no)
    mess = '–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä –ø–æ –¥—Ä—É–≥–æ–º—É —Å—Ç–∏–∫–µ—Ä–ø–∞–∫—É?'
    bot.send_message(message.chat.id, mess,
                     parse_mode='html',
                     reply_markup=markup)


@bot.message_handler(content_types=['photo'])
def get_user_photo(message):
    global USER_MAP

    print(USER_MAP)
    print(f"GET PHOTO FOR USER {message.from_user.id}...")

    try:
        sticker_set_name = USER_MAP[message.from_user.id]["sticker_set_name"]
        os.makedirs(f'photo/{message.from_user.id}', exist_ok=True)

        file_info = bot.get_file(message.photo[len(message.photo) - 1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        USER_MAP[message.from_user.id]["img_name"] = message.photo[1].file_id
        img_name = USER_MAP[message.from_user.id]["img_name"]

        src = f'photo/{message.from_user.id}/{img_name}.png'
        with open(src, 'wb') as new_file:
            new_file.write(downloaded_file)
        bot.reply_to(message,
                     "–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–π–º–µ—Ç –Ω–µ –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ")

        save = USER_MAP[message.from_user.id]["save"]
        print(save)
        if save:
            tune_dreambooth(message)
        generate_sticker(message, image_path=src)
        send_sticker(message)
    except Exception as e:
        print("203", e)
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫.")


def add_to_sticker_set(message):
    global USER_MAP

    print(USER_MAP)
    print(f"ADD STICKER FOR USER {message.from_user.id}...")

    sticker_set_name = f"s{message.from_user.id}_by_img2sticker_bot"
    img_name = USER_MAP[message.from_user.id]["img_name"]
    try:
        bot.get_sticker_set(sticker_set_name)
        image = open(f"sticker/{message.from_user.id}/{img_name}.png", "rb")
        bot.add_sticker_to_set(message.from_user.id, sticker_set_name, emojis=['üå≥'],
                               png_sticker=image)
    except Exception as e:
        print("218", e)
        image = open(f"sticker/{message.from_user.id}/{img_name}.png", "rb")
        bot.create_new_sticker_set(user_id=message.from_user.id, name=sticker_set_name, title='your stickers',
                                   png_sticker=image,
                                   emojis=['üå≥'])

    os.remove(f'sticker/{message.from_user.id}/{img_name}.png')

    sticker_set_link = f"t.me/addstickers/{sticker_set_name}"
    sticker_set = bot.get_sticker_set(sticker_set_name)
    bot.send_message(
        message.chat.id, sticker_set_link
    )
    bot.send_sticker(message.chat.id, sticker_set.stickers[-1].file_id)


@bot.message_handler(content_types=["sticker"])
def get_sticker_pack(message):
    global USER_MAP

    print(USER_MAP)
    print(f"GET STICKER PACK FOR USER {message.from_user.id}...")

    try:
        os.makedirs(f"sticker_pack/{message.from_user.id}", exist_ok=True)

        USER_MAP[message.from_user.id]["sticker_set_name"] = message.sticker.set_name
        bot.send_message(message.from_user.id, "–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ")
        parce_sticker_set(message, message.sticker.set_name)
    except Exception as e:
        print("254", e)
        bot.send_message(message.chat.id, "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –°–¢–ê–†–¢.")


@bot.message_handler(commands=['start'])
def start(message):
    global USER_MAP
    print(USER_MAP)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    sticker = types.KeyboardButton('–°–¥–µ–ª–∞—Ç—å —Å—Ç–∏–∫–µ—Ä')
    creators = types.KeyboardButton('–°–æ–∑–¥–∞—Ç–µ–ª–∏')
    donate = types.KeyboardButton('–î–æ–Ω–∞—Ç')
    markup.add(sticker, creators, donate)

    if message.from_user.id not in USER_MAP:
        USER["save"] = 1
        USER["sticker_set_name"] = ""
        USER["img_name"] = ""
        USER_MAP[message.from_user.id] = USER

    mess = f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!! –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —Å—Ç–∏–∫–µ—Ä –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "—Å–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä" –∏ —Å–ª–µ–¥—É–π –¥–∞–ª—å–Ω–µ–π—à–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º'
    rules = open("rules.txt").read()
    bot.send_message(message.chat.id, rules)
    bot.send_message(message.chat.id, mess,
                     parse_mode='html',
                     reply_markup=markup)


@bot.message_handler()
def get_user_text(message):
    global USER_MAP

    if message.from_user.id not in USER_MAP:
        USER_MAP[message.from_user.id] = {}
        USER_MAP[message.from_user.id]["save"] = 1
        USER_MAP[message.from_user.id]["sticker_set_name"] = ""
        USER_MAP[message.from_user.id]["img_name"] = ""

    print(USER_MAP)
    if message.text == 'id':
        bot.send_message(message.chat.id, f'–≤–∞—à ID {message.from_user.id}')
    elif message.text == '–¥–æ–±–∞–≤–∏—Ç—å –≤ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫':
        add_to_sticker_set(message)
        bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ!!")
        test(message)
    elif message.text == '–Ω–µ –¥–æ–±–∞–≤–ª—è—Ç—å':
        bot.send_message(message.chat.id, "–Ø –í–∞—Å –ø–æ–Ω—è–ª!!")
        test(message)
    elif message.text == '—Å–¥–µ–ª–∞—Ç—å —Å—Ç–∏–∫–µ—Ä –∫ –Ω–æ–≤–æ–º—É —Å—Ç–∏–∫–µ—Ä–ø–∞–∫—É':
        USER_MAP[message.from_user.id]["save"] = 1
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫")
    elif message.text == '–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ –ø—Ä–æ—à–ª–æ–º—É —Å—Ç–∏–∫–µ—Ä–ø–∞–∫—É':
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ")
        USER_MAP[message.from_user.id]["save"] = 0
        print(USER_MAP[message.from_user.id]["save"])
    elif message.text == '–°–¥–µ–ª–∞—Ç—å —Å—Ç–∏–∫–µ—Ä':
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫")
    elif message.text == '–î–æ–Ω–∞—Ç':
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('–î–æ–Ω–∞—Ç',
                                              url='https://yandex.ru/images/search?text=%D0%BA%D0%B0%D1%80%D1%82%D0%B8%D0%BD%D0%BA%D0%B0+%D0%BF%D0%BE%D0%BD%D1%87%D0%B8%D0%BA%D0%B0+%D0%BD%D0%B0%D1%80%D0%B8%D1%81%D0%BE%D0%B2%D0%B0%D0%BD%D0%BD%D0%BE%D0%B3%D0%BE&img_url=http%3A%2F%2Fgas-kvas.com%2Fuploads%2Fposts%2F2023-01%2F1673578179_gas-kvas-com-p-risunok-detskii-ponchik-1.png&pos=0&rpt=simage&stype=image&lr=213&parent-reqid=1683015245087223-13411368779784305621-balancer-l7leveler-kubr-yp-sas-60-BAL-4327&source=serp'))
        bot.send_message(message.chat.id, '–î–æ–Ω–∞—Ç', reply_markup=markup)
    elif message.text == '–°–æ–∑–¥–∞—Ç–µ–ª–∏':
        bot.send_message(message.chat.id,
                         "–ö–æ–º–∞–Ω–¥–∞ –∫—Ä—É—Ç—ã—Ö —Ä–µ–±—è—Ç: \n –¢–∞—Å—è(@misshimichka) \n –ê–ª–µ–∫—Å–∞–Ω–¥—Ä(@alexsm1213)  \n –î–∏–º–∞(@Something_is_going_wrong) \n –ò–≥–æ—Ä—å(@Igk7p) \n –Ø–Ω–∞(@poltorq)")


bot.polling(none_stop=True)